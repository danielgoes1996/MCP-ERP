#!/usr/bin/env python3
"""
Ejemplo de Validaci√≥n Inteligente con GPT Vision
Demuestra c√≥mo usar el sistema para corregir errores de OCR
"""

import asyncio
import base64
import logging
from typing import Dict, Any

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def example_basic_validation():
    """
    Ejemplo b√°sico: validar un campo espec√≠fico
    """
    print("=== EJEMPLO 1: VALIDACI√ìN B√ÅSICA ===")

    from core.intelligent_field_validator import validate_single_field

    # Imagen de ejemplo (en producci√≥n vendr√≠a del upload del usuario)
    test_image = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="

    # Validar folio espec√≠fico
    result = await validate_single_field(
        image_data=test_image,
        field_name="folio"
    )

    print(f"üìÑ Folio detectado: '{result.final_value}'")
    print(f"üéØ Confianza: {result.confidence:.2%}")
    print(f"üîß M√©todo usado: {result.method_used}")
    print(f"üë• Candidatos encontrados: {result.all_candidates}")

    if result.gpt_reasoning:
        print(f"üß† Razonamiento GPT: {result.gpt_reasoning}")


async def example_portal_error_correction():
    """
    Ejemplo avanzado: corregir error espec√≠fico del portal web
    """
    print("\n=== EJEMPLO 2: CORRECCI√ìN POR ERROR DE PORTAL ===")

    from core.intelligent_field_validator import validate_single_field

    # Simular imagen de ticket donde OCR detect√≥ mal el folio
    test_image = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="

    # Portal web rechaz√≥ el folio con error espec√≠fico
    portal_error = "El folio ingresado no existe en nuestros registros. Verifique el n√∫mero."

    result = await validate_single_field(
        image_data=test_image,
        field_name="folio",
        portal_error=portal_error
    )

    print(f"üö® Error del portal: {portal_error}")
    print(f"üîÑ Folio corregido por GPT Vision: '{result.final_value}'")
    print(f"üéØ Confianza en correcci√≥n: {result.confidence:.2%}")
    print(f"üß† Explicaci√≥n de GPT: {result.gpt_reasoning[:200]}...")


async def example_multiple_fields_validation():
    """
    Ejemplo completo: validar m√∫ltiples campos de un ticket
    """
    print("\n=== EJEMPLO 3: VALIDACI√ìN M√öLTIPLE ===")

    from core.intelligent_field_validator import validate_ticket_fields

    # Imagen de ticket completo
    test_image = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="

    # Validar campos est√°ndar de facturaci√≥n
    fields = await validate_ticket_fields(
        image_data=test_image,
        required_fields=['folio', 'rfc_emisor', 'monto_total', 'fecha']
    )

    print("üìã CAMPOS EXTRA√çDOS:")
    for field_name, value in fields.items():
        emoji = {"folio": "üé´", "rfc_emisor": "üè¢", "monto_total": "üí∞", "fecha": "üìÖ"}.get(field_name, "üìÑ")
        print(f"   {emoji} {field_name}: '{value}'")


async def example_web_automation_integration():
    """
    Ejemplo de integraci√≥n con automatizaci√≥n web
    """
    print("\n=== EJEMPLO 4: INTEGRACI√ìN CON AUTOMATIZACI√ìN WEB ===")

    # Simulaci√≥n de flujo real
    class MockWebPortal:
        """Simula un portal web que rechaza valores incorrectos"""

        def validate_form_data(self, data: Dict[str, str]) -> Dict[str, str]:
            """Simula validaci√≥n del portal y retorna errores espec√≠ficos"""
            errors = {}

            # Simular que el folio OCR est√° mal
            if data.get('folio') == 'OCR_MISTAKE_123':
                errors['folio'] = "Folio no encontrado. Verifique el n√∫mero del ticket."

            # Simular que el RFC tiene formato incorrecto
            if data.get('rfc_emisor') and len(data['rfc_emisor']) != 13:
                errors['rfc_emisor'] = "RFC debe tener exactamente 13 caracteres."

            return errors

    # Datos extra√≠dos por OCR (con errores simulados)
    ocr_data = {
        'folio': 'OCR_MISTAKE_123',  # Error: OCR ley√≥ mal
        'rfc_emisor': 'ABC12345678',  # Error: RFC incompleto
        'monto_total': '150.75'       # Correcto
    }

    # Portal rechaza los datos
    portal = MockWebPortal()
    errors = portal.validate_form_data(ocr_data)

    if errors:
        print(f"‚ùå Portal rechaz√≥ datos: {errors}")

        # Usar validador inteligente para corregir
        from core.intelligent_field_validator import intelligent_validator

        # Imagen original del ticket
        ticket_image = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="

        # Validar solo campos problem√°ticos
        corrected_results = await intelligent_validator.validate_multiple_fields(
            image_data=ticket_image,
            required_fields=list(errors.keys()),
            portal_errors=errors
        )

        print("üîß CORRECCIONES DE GPT VISION:")
        for field_name, result in corrected_results.items():
            print(f"   üìù {field_name}:")
            print(f"      Antes: '{ocr_data.get(field_name)}'")
            print(f"      Despu√©s: '{result.final_value}'")
            print(f"      Confianza: {result.confidence:.2%}")
            print(f"      Razonamiento: {result.gpt_reasoning[:100]}...")

        # Crear datos corregidos
        corrected_data = ocr_data.copy()
        for field_name, result in corrected_results.items():
            if result.final_value and result.confidence >= 0.7:
                corrected_data[field_name] = result.final_value

        # Validar de nuevo con portal
        final_errors = portal.validate_form_data(corrected_data)
        if not final_errors:
            print("‚úÖ Portal acepta datos corregidos!")
        else:
            print(f"‚ö†Ô∏è A√∫n hay errores: {final_errors}")


async def example_real_world_scenario():
    """
    Ejemplo de escenario real: ticket de OXXO con folio mal detectado
    """
    print("\n=== EJEMPLO 5: ESCENARIO REAL - TICKET OXXO ===")

    # Simulaci√≥n de texto OCR con errores t√≠picos
    simulated_ocr_text = """
    OXXO TIENDA #1234
    RFC: OXX970814HS9
    FECHA: 19/09/2024 18:30
    FOLIO: A-78945–±  <-- Error: OCR ley√≥ '–±' en lugar de '6'

    Coca Cola 600ml    $25.00
    Sabritas Original  $15.50
    TOTAL: $40.50
    """

    # Portal OXXO rechaza el folio
    portal_error = "Folio de ticket no v√°lido. Formato esperado: A-######"

    print(f"üìÑ Texto OCR (con errores): {simulated_ocr_text}")
    print(f"üö® Error de portal OXXO: {portal_error}")

    # GPT Vision analiza la imagen original para corregir
    from core.intelligent_field_validator import validate_single_field

    ticket_image = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="

    result = await validate_single_field(
        image_data=ticket_image,
        field_name="folio",
        portal_error=portal_error
    )

    print(f"üîç GPT Vision detect√≥:")
    print(f"   Folio corregido: '{result.final_value}'")
    print(f"   Confianza: {result.confidence:.2%}")
    print(f"   Explicaci√≥n: {result.gpt_reasoning}")

    # Simular √©xito con valor corregido
    if result.final_value == "A-789456":
        print("‚úÖ ¬°Portal OXXO acepta el folio corregido!")
    else:
        print("‚ö†Ô∏è Necesita revisi√≥n manual")


async def main():
    """Ejecutar todos los ejemplos"""
    print("üöÄ INICIANDO EJEMPLOS DE VALIDACI√ìN INTELIGENTE CON GPT VISION")
    print("=" * 70)

    try:
        await example_basic_validation()
        await example_portal_error_correction()
        await example_multiple_fields_validation()
        await example_web_automation_integration()
        await example_real_world_scenario()

        print("\n‚úÖ TODOS LOS EJEMPLOS COMPLETADOS")
        print("\nüí° BENEFICIOS DEL SISTEMA:")
        print("   üéØ Correcci√≥n autom√°tica de errores de OCR")
        print("   üß† An√°lisis inteligente con contexto visual")
        print("   üîÑ Recuperaci√≥n autom√°tica de errores de portal")
        print("   üìä M√∫ltiples candidatos para m√°xima precisi√≥n")
        print("   üè∑Ô∏è Razonamiento explicable de las decisiones")

    except Exception as e:
        logger.error(f"Error en ejemplos: {e}")


if __name__ == "__main__":
    # Ejecutar ejemplos
    asyncio.run(main())