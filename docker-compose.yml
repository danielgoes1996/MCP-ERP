version: '3.8'

services:
  # Aplicación principal FastAPI
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=/app/data/empresa.db
      - REDIS_URL=redis://redis:6379
      - USE_REDIS=true
      - MAX_WORKERS=4
      - BATCH_SIZE=20
      - LOG_LEVEL=INFO
      # Credenciales para facturación
      - INVOICING_EMAIL=${INVOICING_EMAIL}
      - INVOICING_PASSWORD=${INVOICING_PASSWORD}
      - COMPANY_RFC=${COMPANY_RFC}
      - COMPANY_NAME=${COMPANY_NAME}
      - WHATSAPP_API_KEY=${WHATSAPP_API_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2

  # Workers para procesamiento de tickets
  worker-1:
    build: .
    environment:
      - DATABASE_URL=/app/data/empresa.db
      - REDIS_URL=redis://redis:6379
      - USE_REDIS=true
      - MAX_WORKERS=4
      - BATCH_SIZE=10
      - LOG_LEVEL=INFO
      - INVOICING_EMAIL=${INVOICING_EMAIL}
      - INVOICING_PASSWORD=${INVOICING_PASSWORD}
      - COMPANY_RFC=${COMPANY_RFC}
      - COMPANY_NAME=${COMPANY_NAME}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - web
    restart: unless-stopped
    command: python -m modules.invoicing_agent.queue_manager

  worker-2:
    build: .
    environment:
      - DATABASE_URL=/app/data/empresa.db
      - REDIS_URL=redis://redis:6379
      - USE_REDIS=true
      - MAX_WORKERS=4
      - BATCH_SIZE=10
      - LOG_LEVEL=INFO
      - INVOICING_EMAIL=${INVOICING_EMAIL}
      - INVOICING_PASSWORD=${INVOICING_PASSWORD}
      - COMPANY_RFC=${COMPANY_RFC}
      - COMPANY_NAME=${COMPANY_NAME}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - web
    restart: unless-stopped
    command: python -m modules.invoicing_agent.queue_manager

  # Redis para colas y cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Nginx para load balancing y SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    restart: unless-stopped

  # Monitoreo con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data: